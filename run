#!/bin/bash

## The below is modified from https://github.com/activeeos/wireguard-docker
## 下面语句参考 https://github.com/activeeos/wireguard-docker 修改

# 在线获得服务器IP
get_ip() {
	ip=$DOMAIN
	[[ -z $wanip ]] && wanip=$(curl -s https://ipinfo.io/ip)
	[[ -z $wanip ]] && wanip=$(curl -s https://api.ip.sb/ip)
	[[ -z $wanip ]] && wanip=$(curl -s https://api.ipify.org)
	[[ -z $wanip ]] && wanip=$(curl -s https://ip.seeip.org)
	[[ -z $wanip ]] && wanip=$(curl -s https://ifconfig.co/ip)
	[[ -z $wanip ]] && wanip=$(curl -s https://api.myip.com | grep -oE "([0-9]{1,3}\.){3}[0-9]{1,3}")
	[[ -z $wanip ]] && wanip=$(curl -s icanhazip.com)
	[[ -z $wanip ]] && wanip=$(curl -s myip.ipip.net | grep -oE "([0-9]{1,3}\.){3}[0-9]{1,3}")
	[[ -z $wanip ]] && echo -e "\n$red 这垃圾小鸡扔了吧！$none\n" && exit
}

get_ip

create_config() {
cat <<EOF >/etc/wireguard/$WGNAME.conf
[Interface]
PrivateKey = $(cat sprivatekey)
Address = $WGSERVERIP
PostUp   = iptables -t nat -A POSTROUTING -o eth0 -s $LANRANGE -j MASQUERADE;iptables -t nat -A POSTROUTING -o eth0 -s $WGRANGE -j MASQUERADE
PostDown = iptables -t nat -D POSTROUTING -o eth0 -s $LANRANGE -j MASQUERADE;iptables -t nat -D POSTROUTING -o eth0 -s $WGRANGE -j MASQUERADE
ListenPort = $SERVER_PORT
MTU = $mtu

[Peer]
PublicKey = $(cat cpublickey)
AllowedIPs = $WGCLIENTIP,$LANRANGE
	
EOF

# 生成简洁的客户端配置
cat <<EOF >/scripts/client.conf
[Interface]
PrivateKey = $(cat cprivatekey)
Address = $WGCLIENTIP
#  MTU = $mtu
#  PreUp =  start   .\route\routes-up.bat
#  PostDown = start  .\route\routes-down.bat

[Peer]
PublicKey = $(cat spublickey)
Endpoint = $wanip:$SERVER_PORT
AllowedIPs = 0.0.0.0/0
PersistentKeepalive = 25
	
EOF

# 添加 2-9 号多用户配置
for i in {2..9}
do
    newlanip="`echo $WGCLIENTIP |awk -F. '{print $1 "." $2 "." $3}'`"
    cip=$newlanip.${ip_list[$i]}
    wg genkey | tee cprivatekey | wg pubkey > cpublickey

    cat <<EOF >>/etc/wireguard/$WGNAME.conf
[Peer]
PublicKey = $(cat cpublickey)
AllowedIPs = $cip/32,$LANRANGE
EOF

    cat <<EOF >/scripts/${WGNAME}_$i.conf
[Interface]
PrivateKey = $(cat cprivatekey)
Address = $cip/24
[Peer]
PublicKey = $(cat spublickey)
Endpoint = $wanip:$SERVER_PORT
AllowedIPs = 0.0.0.0/0
PersistentKeepalive = 25
EOF
    cat /scripts/${WGNAME}_$i.conf | qrencode -o ${WGNAME}_$i.png
done
}

# 查看是否有接口配置信息，没有就创建
if [ ! -d "/etc/wireguard" ]; then
  mkdir -p /etc/wireguard
fi
interfaces=`find /etc/wireguard -type f`
if [[ -z $interfaces ]]; then
    	echo "$(date): Interface not found in /etc/wireguard" >&2
    	# 然后开始生成 密匙对(公匙+私匙)。
    	wg genkey | tee sprivatekey | wg pubkey > spublickey
    	wg genkey | tee cprivatekey | wg pubkey > cpublickey
	create_config
	interfaces=`find /etc/wireguard -type f`
fi

# 启动接口
for interface in $interfaces; do
    echo "$(date): Starting Wireguard $interface"
    wg-quick up $interface
done

# Add masquerade rule for NAT'ing VPN traffic bound for the Internet
# 增加伪装规则和MSS
# echo "Adding iptables NAT rule"
# iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
iptables -A FORWARD --protocol tcp --tcp-flags SYN,RST SYN --jump TCPMSS --clamp-mss-to-pmtu
# exit 0

# boot udpspeedv2 and udp2raw
# 启动UDPspeedv2进程和udp2raw进程
boot_udptool () {
  UDPSPEED_PORT=`expr $SERVER_PORT + 100`
  /usr/bin/speederv2 -s -l 0.0.0.0:$UDPSPEED_PORT -r 0.0.0.0:$SERVER_PORT -f$FEC_OPTIONS --sock-buf=10240 --fix-latency --fifo /tmp/fifo.file --timeout $TIMEOUT --mode 0  /dev/sdtout 2>&1 &
  UDP2RAW_PORT=$SERVER_PORT
  /usr/bin/udp2raw -s -l 0.0.0.0:$UDP2RAW_PORT -r 0.0.0.0:$UDPSPEED_PORT --fix-gro --raw-mode faketcp -k $PASSWORD /dev/sdtout 2>&1 &
  nohup iperf3 -s &
  socat -v UDP-LISTEN:4000,fork PIPE &
  sleep 3
}

boot_udptool

echo -e "-----------------------------------------------------------"
echo -e "the server ip:\t$wanip"
echo -e "the wireguard server port:\t$SERVER_PORT /udp"
echo -e "the udpspeeder server port:\t$UDPSPEED_PORT /udp"
echo -e "the udp2raw server port:\t$UDP2RAW_PORT /tcp"
echo -e "Client configure Private Key:\n$(cat cprivatekey)" 
echo -e "Client configure IP Address :\n$WGCLIENTIP"
echo -e "Client configure Public Key :\n$(cat spublickey)"
echo -e "-----------------------------------------------------------"

# Handle shutdown behavior
# 处理关机行为
finish () {
    echo "$(date): Shutting down Wireguard"
    for interface in $interfaces; do
        wg-quick down $interface
    done
#    iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE
    iptables -D FORWARD --protocol tcp --tcp-flags SYN,RST SYN --jump TCPMSS --clamp-mss-to-pmtu
    exit 0
}

trap finish SIGTERM SIGINT SIGQUIT

sleep infinity &
wait $!
